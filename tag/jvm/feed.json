{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gyo • All posts by \"jvm\" tag",
    "description": "Gyo的博客",
    "home_page_url": "https://gyoliu.github.io",
    "items": [
        {
            "id": "https://gyoliu.github.io/2023/05/06/jvm-params/",
            "url": "https://gyoliu.github.io/2023/05/06/jvm-params/",
            "title": "JVM常用参数",
            "date_published": "2023-05-06T05:01:17.000Z",
            "content_html": "<p><a href=\"https://help.aliyun.com/document_detail/148851.html?spm=a2c4g.383255.0.0.30855accl7pyIr\">阿里 Serverless JVM 最佳实践</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># [阿里 Serverless JVM 最佳实践]\nhttps:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;148851.html?spm&#x3D;a2c4g.383255.0.0.30855accl7pyIr\n\n在Java虚拟机的参数中，有3种表示方法\n\n标准参数（-），所有的JVM实现都必须实现这些参数的功能，而且向后兼容；\n非标准参数（-X），默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容；\n非Stable参数（-XX），此类参数各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用（但是，这些参数往往是非常有用的）；\n\n\n# 感知容器内存限制\n-XX:+UseContainerSupport\n# 设置JVM最大内存为整个宿主总内存的占比，适合docker容器内存动态调整\n-XX:MaxRAMPercentage&#x3D;80.0  -XX:MinRAMPercentage&#x3D;80.0 -XX:InitialRAMPercentage&#x3D;80.0\n# 固定设置堆内存大小，不能感知宿主内存大小动态调整\n-Xmx&#x2F;-Xms\n\n# GC 日志打印 \n-XX:+PrintGCDetails\n-XX:+PrintGCDateStamps\n-XX:+PrintHeapAtGC\n-XX:+PrintCommandLineFlags\n-XX:+PrintFlagsFinal\n-Xloggc:&#x2F;gc-%t.log \n-XX:+HeapDumpOnOutOfMemoryError \n-XX:HeapDumpPath&#x3D;&#x2F;data&#x2F;logs&#x2F;heapdump.hprof \n\n# 垃圾回收器\n-XX:+UseSerialGC\n# 允许使用并行清除垃圾收集器（也称为吞吐量收集器），以利用多个处理器来提高应用程序的性能。默认情况下，此选项是禁用的\n-XX:+UseParallelGC\n# 允许在年轻代中使用并行线程进行收集。默认情况下，此选项处于禁用状态。\n-XX:+USeParNewGC\n-XX:+UseG1GC\n-XX:+UseZGC\n\n\njps： 跟linux的ps一样，只不过是列出java程序\njps -m  列出所有java程序，并显示传入参数 \njps -l  列出所有java程序，显示类的全限名\n\njstat：观察java程序运行时的相关信息，主要是堆信息\njstat -class -t pid 1000 2  查看classLoader相关信息，每隔一秒执行一次，总共收集两次\njstat -gc pid 查看gc情况\njstat -gcnew pid  查看新生代的详细信息\njstat -gcold pid  查看老年代的详细信息\n\njinfo：查看java应用程序的扩展参数，部分参数可支持动态修改\njinfo -flag MaxtenuringThreshold pid 查看gc升级年龄\njinfo -flag +PrintGCDetails pid  修改使用PrintGCDetails参数\n\njmap：导出堆到文件\njmap -histo pid &gt; &#x2F;usr&#x2F;local&#x2F;tmp&#x2F;a.txt  java程序的对象统计信息\njmap -histo:live \njmap -dump:format&#x3D;b file&#x3D;&#x2F;tmp&#x2F;heap.hprof PID 得到java程序的当前快照，主要用于分析线程的运行情况\n\njstack：查看线程堆栈\njstack -l pid &gt; &#x2F;tmp&#x2F;stack.hprof 这里-l是打印锁的详细信息然后\n输出到指定目录的*.hprof文件中\n\n# 常用启动命令\nnohup java -Xms2g -Xmx2g -server -verbose:gc -XX:HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;dump.hprof -XX:+PrintGCDateStamps \n-XX:+PrintGCDetails -Xloggc:log&#x2F;gc-%t.log -XX:+UseGCLogFileRotation \n-XX:NumberOfGCLogFiles&#x3D;2 -XX:GCLogFileSize&#x3D;100M -XX:+CrashOnOutOfMemoryError \n-jar app.jar  &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;\n\n\n# 容器docker file\nENV JAVA_OPTS&#x3D;&quot;-server -XX:+UseContainerSupport -XX:+UseG1GC -XX:MaxRAMPercentage&#x3D;80.0  -XX:MinRAMPercentage&#x3D;80.0 -XX:InitialRAMPercentage&#x3D;80.0 -Duser.timezone&#x3D;GMT+8 -Ddruid.mysql.usePingMethod&#x3D;false&quot;\nENV PARAMS&#x3D;&quot;&quot;\nENTRYPOINT [&quot;sh&quot;,&quot;-c&quot;, &quot;java -jar $JAVA_OPTS &#x2F;itsm-module-job-service.jar $PARAMS&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"/archives/hello-halo\" title=\"Hello Halo\">上一篇 </a><a href=\"/archives/hibernate%E5%8E%9F%E7%94%9F%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E9%9B%86%E6%98%A0%E5%B0%84%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB\" title=\"hibernate原生查询，结果集映射源码阅读\">下一篇</a></p>\n",
            "tags": [
                "Java",
                "JVM"
            ]
        }
    ]
}