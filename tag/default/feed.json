{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gyo • All posts by \"default\" tag",
    "description": "Gyo的博客",
    "home_page_url": "https://gyoliu.github.io",
    "items": [
        {
            "id": "https://gyoliu.github.io/2024/08/29/nginx-proxy/",
            "url": "https://gyoliu.github.io/2024/08/29/nginx-proxy/",
            "title": "nginx 正向代理配置 https 支持",
            "date_published": "2024-08-29T05:23:54.000Z",
            "content_html": "<h1 id=\"nginx-正向代理配置-https-支持\"><a href=\"#nginx-正向代理配置-https-支持\" class=\"headerlink\" title=\"nginx 正向代理配置 https 支持\"></a>nginx 正向代理配置 https 支持</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> -- 遇到很多需要的包安装下来就好\n\nyum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> perl perl-ExtUtils-Embed gperftools geoip-devel\n\n<span class=\"token function\">wget</span> https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/heads/master.zip\n<span class=\"token function\">unzip</span> master.zip\n<span class=\"token function\">wget</span> https://nginx.org/download/nginx-1.20.2.tar.gz\n<span class=\"token function\">tar</span> xzvf nginx-1.20.2.tar.gz\n\n<span class=\"token builtin class-name\">cd</span> nginx-1.20.2\n\npatch <span class=\"token parameter variable\">-p1</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">..</span>/ngx_http_proxy_connect_module_master/patch/proxy_connect_rewrite_1018.patch\n\n./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/share/nginx --sbin-path<span class=\"token operator\">=</span>/usr/sbin/nginx --modules-path<span class=\"token operator\">=</span>/usr/lib64/nginx/modules --conf-path<span class=\"token operator\">=</span>/etc/nginx/nginx.conf --error-log-path<span class=\"token operator\">=</span>/var/log/nginx/error.log --http-log-path<span class=\"token operator\">=</span>/var/log/nginx/access.log --http-client-body-temp-path<span class=\"token operator\">=</span>/var/lib/nginx/tmp/client_body --http-proxy-temp-path<span class=\"token operator\">=</span>/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path<span class=\"token operator\">=</span>/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path<span class=\"token operator\">=</span>/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path<span class=\"token operator\">=</span>/var/lib/nginx/tmp/scgi --pid-path<span class=\"token operator\">=</span>/run/nginx.pid --lock-path<span class=\"token operator\">=</span>/run/lock/subsys/nginx <span class=\"token parameter variable\">--user</span><span class=\"token operator\">=</span>nginx <span class=\"token parameter variable\">--group</span><span class=\"token operator\">=</span>nginx --with-compat --with-debug --with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module<span class=\"token operator\">=</span>dynamic --with-http_mp4_module --with-http_perl_module<span class=\"token operator\">=</span>dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --add-module<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/ngx_http_proxy_connect_module-master --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module<span class=\"token operator\">=</span>dynamic --with-mail<span class=\"token operator\">=</span>dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream<span class=\"token operator\">=</span>dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads\n\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\nsystemctl restart nginx\n\n-- 测试代理\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-x</span> <span class=\"token number\">117.72</span>.44.94:81 https://www.qq.com --proxy-insecure <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n        listen                         81;\n\n        # dns resolver used by forward proxying\n        resolver                       8.8.8.8;\n\n        # forward proxy for CONNECT requests\n        proxy_connect;\n        proxy_connect_allow            all;\n        proxy_connect_connect_timeout  100s;\n        proxy_connect_data_timeout     100s;\n\n        # defined by yourself for non-CONNECT requests\n        # Example: reverse proxy for non-CONNECT requests\n\n        location &#x2F; &#123;\n            proxy_pass http:&#x2F;&#x2F;$http_host$request_uri;\n            proxy_set_header Host $http_host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        &#125;\n\n    &#125;\n\nserver &#123;\n        listen 443 default;\n        # self signed certificate generated via openssl command\n        ssl_certificate_key            &#x2F;root&#x2F;ssl&#x2F;server.key;\n        ssl_certificate                &#x2F;root&#x2F;ssl&#x2F;server.crt;\n        ssl_session_cache              shared:SSL:1m;\n\n        # dns resolver used by forward proxying\n        resolver                       8.8.8.8 8.8.4.4;\n\n        # forward proxy for CONNECT request\n        proxy_connect;\n        proxy_connect_allow            all;\n        proxy_connect_connect_timeout  100s;\n        proxy_connect_data_timeout     100s;\n\n        # defined by yourself for non-CONNECT request\n        # Example: reverse proxy for non-CONNECT requests\n        location &#x2F; &#123;\n            proxy_pass http:&#x2F;&#x2F;$http_host$request_uri;\n            proxy_set_header Host $http_host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Default",
                "nginx"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2024/07/29/PaddleSpeech/",
            "url": "https://gyoliu.github.io/2024/07/29/PaddleSpeech/",
            "title": "基于百度飞浆平台语音识别PaddleSpeech",
            "date_published": "2024-07-29T05:20:51.000Z",
            "content_html": "<h1 id=\"PaddleSpeech-是基于飞桨-PaddlePaddle-的语音方向的开源模型库\"><a href=\"#PaddleSpeech-是基于飞桨-PaddlePaddle-的语音方向的开源模型库\" class=\"headerlink\" title=\"PaddleSpeech 是基于飞桨 PaddlePaddle 的语音方向的开源模型库\"></a><strong>PaddleSpeech</strong> 是基于飞桨 <a href=\"https://gitee.com/link?target=https://github.com/PaddlePaddle/Paddle\">PaddlePaddle</a> 的语音方向的开源模型库</h1><p><a href=\"https://github.com/PaddlePaddle/PaddleSpeech\">https://github.com/PaddlePaddle/PaddleSpeech</a></p>\n<h2 id=\"文本介绍-Docker-部署方式\"><a href=\"#文本介绍-Docker-部署方式\" class=\"headerlink\" title=\"文本介绍 Docker 部署方式\"></a>文本介绍 Docker 部署方式</h2><p>依赖环境介绍,docker 环境就不用担心这些：</p>\n<ul>\n<li>gcc &gt;&#x3D; 4.8.5</li>\n<li>paddlepaddle &lt;&#x3D; 2.5.1 桨桨 &lt;&#x3D; 2.5.1</li>\n<li>python &gt;&#x3D; 3.8 <br>自 2024 年 6 月以来 Docker Hub 访问不了，国内开源厂商镜像如清华等都宣布下架。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 设置 <span class=\"token function\">docker</span> mirrors\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span>  /etc/docker/daemon.json\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"https://registry.docker-cn.com\"</span>,\n        <span class=\"token string\">\"https://docker.mirrors.ustc.edu.cn\"</span>,\n        <span class=\"token string\">\"https://hub-mirror.c.163.com\"</span>,\n        <span class=\"token string\">\"https://mirror.baidubce.com\"</span>,\n        <span class=\"token string\">\"https://ccr.ccs.tencentyun.com\"</span>,\n        <span class=\"token string\">\"https://dockerhub.icu/\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># GPU版本</span>\n<span class=\"token function\">docker</span> pull paddlecloud/paddlespeech:develop-gpu-cuda10.2-cudnn7-latest\n<span class=\"token comment\"># CPU版本</span>\n<span class=\"token function\">docker</span> pull paddlecloud/paddlespeech:develop-cpu-latest\n<span class=\"token comment\"># 或者使用 docker search paddlespeech 搜索相关的镜像版本</span>\n<span class=\"token comment\"># 启动服务</span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> dev <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/mnt <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8888</span>:8888 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8090</span>:8090 <span class=\"token parameter variable\">-it</span> paddlecloud/paddlespeech:develop-cpu-latest  /bin/bash\n\n<span class=\"token comment\"># 自然语言处理工具库NLTK安装</span>\n<span class=\"token function\">docker</span> 镜像内的目录是 /root/nltk_data/\n可以将下载好的传输到服务器上复制到这个目录下如：cp <span class=\"token parameter variable\">-r</span> /mnt/nltk_data-gh-pages/packages/ /root/nltk_data/\nNLTK 数据下载： https://github.com/nltk/nltk_data/archive/refs/heads/gh-pages.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 设置 python pip \npip <span class=\"token function\">install</span> xxx <span class=\"token parameter variable\">-i</span> https://mirror.baidu.com/pypi/simple\nor \npip config <span class=\"token builtin class-name\">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>测试数据下载：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> <span class=\"token parameter variable\">-c</span> https://paddlespeech.bj.bcebos.com/PaddleAudio/zh.wav\n<span class=\"token function\">wget</span> <span class=\"token parameter variable\">-c</span> https://paddlespeech.bj.bcebos.com/PaddleAudio/en.wav<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>启动 WEB 服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">paddlespeech_server start <span class=\"token parameter variable\">--config_file</span> ./demos/speech_server/conf/application.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>识别语音命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">paddlespeech asr <span class=\"token parameter variable\">--lang</span> zh <span class=\"token parameter variable\">--input</span> zh.wav<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>文字转语音命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">paddlespeech tts <span class=\"token parameter variable\">--input</span> <span class=\"token string\">\"你好，欢迎使用百度飞桨深度学习框架！\"</span> <span class=\"token parameter variable\">--output</span> output.wav<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其他命令请参考开源：<br><a href=\"https://github.com/PaddlePaddle/PaddleSpeech\">https://github.com/PaddlePaddle/PaddleSpeech</a></p>\n<p>docker 命令回顾</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看正在运行的 docker hub</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span>\n<span class=\"token comment\"># 进入一个正在运行的 docker hub</span>\n<span class=\"token function\">docker</span> attach 36e3553f6bb3\nor \n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> xxx /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Default",
                "PaddleSpeech"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2024/07/08/nginx-config-https/",
            "url": "https://gyoliu.github.io/2024/07/08/nginx-config-https/",
            "title": "https 证书自动续期，永久免费",
            "date_published": "2024-07-08T05:15:44.000Z",
            "content_html": "<h1 id=\"https-证书自动续期，永久免费\"><a href=\"#https-证书自动续期，永久免费\" class=\"headerlink\" title=\"https 证书自动续期，永久免费\"></a>https 证书自动续期，永久免费</h1><blockquote>\n<p>开源组织的免费证书：<a href=\"https://letsencrypt.org/zh-cn/\">https://letsencrypt.org/zh-cn/</a><br>Let’s Encrypt 和 <a href=\"https://tools.ietf.org/html/rfc8555\">ACME 协议</a>的目标是实现可信数字证书的自动获取，从而简化 HTTPS 服务器部署中的人工操作。 这一目标是由 Web 服务器上的证书管理软件完成的。</p>\n</blockquote>\n<h1 id=\"入门指南\"><a href=\"#入门指南\" class=\"headerlink\" title=\"入门指南\"></a>入门指南</h1><blockquote>\n<p>为了在您的网站上启用 HTTPS，您需要从证书颁发机构（CA）获取证书（一种文件）。 Let’s Encrypt 正是其中一家证书颁发机构。 要从 Let’s Encrypt 获取您网站域名的证书，您必须证明您对域名的实际控制权。 这一过程通常由 Web 主机上运行的 <a href=\"https://tools.ietf.org/html/rfc8555\">ACME 协议</a>客户端完成。</p>\n</blockquote>\n<blockquote>\n<p>申请证书的最佳方式取决于您是否具备服务器的<a href=\"https://en.wikipedia.org/wiki/Shell_account\">命令行访问权限</a>（也称为 SSH 权限）。 如果您仅使用控制面板（例如 <a href=\"https://cpanel.net/\">cPanel</a>、<a href=\"https://www.plesk.com/\">Plesk</a> 或 <a href=\"https://wordpress.org/\">WordPress</a>）管理您的网站，您很有可能没有命令行访问权限。 您可以联系您的托管服务提供商确认。</p>\n</blockquote>\n<h1 id=\"拥有命令行访问权限\"><a href=\"#拥有命令行访问权限\" class=\"headerlink\" title=\"拥有命令行访问权限\"></a>拥有命令行访问权限</h1><blockquote>\n<p>我们建议大多数具有命令行访问权限的人使用 <a href=\"https://certbot.eff.org/\">Certbot</a> ACME 客户端。 它可以在不下线您的服务器的前提下自动执行证书颁发和安装。 对于不需要自动配置的用户，Certbot 还提供专家模式。 它易于使用，适用于许多操作系统，并且具有出色的（注：英文）文档。 前往 <a href=\"https://certbot.eff.org/\">Certbot 官网</a>即可获取针对各类操作系统与服务器软件的使用说明。</p>\n</blockquote>\n<blockquote>\n<p>如果 <a href=\"https://certbot.eff.org/\">Certbot</a> 不能满足您的需求，或者您想尝试别的客户端，还有<a href=\"https://letsencrypt.org/zh-cn/docs/client-options/\">更多 ACME 客户端</a>可供选择。 选定 ACME 客户端软件后，请参阅该客户端的文档。</p>\n</blockquote>\n<blockquote>\n<p>如果您正在尝试不同的 ACME 客户端，请使用我们的<a href=\"https://letsencrypt.org/zh-cn/docs/staging-environment/\">临时环境</a>以避免遭到<a href=\"https://letsencrypt.org/zh-cn/docs/rate-limits/\">速率限制</a>。</p>\n</blockquote>\n<h1 id=\"实现了-ACME-协议的客户端，官方推荐如下：\"><a href=\"#实现了-ACME-协议的客户端，官方推荐如下：\" class=\"headerlink\" title=\"实现了 ACME 协议的客户端，官方推荐如下：\"></a>实现了 ACME 协议的客户端，官方推荐如下：</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;certbot.eff.org&#x2F;instructions?ws&#x3D;nginx&amp;os&#x3D;centosrhel7&amp;tab&#x3D;wildcard<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"阿里云-Centos-7-实现如下：\"><a href=\"#阿里云-Centos-7-实现如下：\" class=\"headerlink\" title=\"阿里云 Centos 7 实现如下：\"></a>阿里云 Centos 7 实现如下：</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">必备条件：\n<span class=\"token number\">1</span>. 安装阿里云 CLI 命令行工具，参考如下：\nhttps://help.aliyun.com/zh/cli/install-cli-on-linux?spm<span class=\"token operator\">=</span>a2c4g.11186623.0.0.5fd7606ftkgvZH\n<span class=\"token number\">2</span>. 安装证书生成 ACME 客户端 \nyum <span class=\"token function\">install</span> epel-release <span class=\"token parameter variable\">-y</span>\nyum <span class=\"token function\">install</span> certbot <span class=\"token parameter variable\">-y</span>\n<span class=\"token number\">3</span>. certbot 文档\nhttps://eff-certbot.readthedocs.io/en/latest/using.html<span class=\"token comment\">#nginx</span>\n<span class=\"token number\">4</span>. 阿里云自动续期脚本\nhttps://github.com/justjavac/certbot-dns-aliyun?tab<span class=\"token operator\">=</span>readme-ov-file\n<span class=\"token number\">5</span>. 成功后如下输出证书保存的路径，之后将 nginx 的证书配置指向该证书\n<span class=\"token number\">6</span>. 重要命令 - 申请证书\ncertbot certonly <span class=\"token parameter variable\">-d</span> *.example.com <span class=\"token parameter variable\">--manual</span> --preferred-challenges dns --manual-auth-hook <span class=\"token string\">\"alidns\"</span> --manual-cleanup-hook <span class=\"token string\">\"alidns clean\"</span>\n<span class=\"token number\">7</span>. 重要命令 - 续期\ncertbot renew <span class=\"token parameter variable\">--manual</span> --preferred-challenges dns --manual-auth-hook <span class=\"token string\">\"alidns\"</span> --manual-cleanup-hook <span class=\"token string\">\"alidns clean\"</span>\n<span class=\"token number\">8</span>. 重要命令 - 自动续期\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span>\n<span class=\"token number\">1</span> <span class=\"token number\">1</span> */1 * * root certbot renew <span class=\"token parameter variable\">--manual</span> --preferred-challenges dns --manual-auth-hook <span class=\"token string\">\"alidns\"</span> --manual-cleanup-hook <span class=\"token string\">\"alidns clean\"</span> --deploy-hook <span class=\"token string\">\"nginx -s reload\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"alidns脚本如下，作用动态添加阿里云-DNS-解析用来验证：\"><a href=\"#alidns脚本如下，作用动态添加阿里云-DNS-解析用来验证：\" class=\"headerlink\" title=\"alidns脚本如下，作用动态添加阿里云 DNS 解析用来验证：\"></a>alidns<strong>脚本如下，作用动态添加阿里云 DNS 解析用来验证：</strong></h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">FLAG</span><span class=\"token operator\">=</span><span class=\"token string\">\"(\\.com\\.cn|\\.gov\\.cn|\\.net\\.cn|\\.org\\.cn|\\.ac\\.cn|\\.gd\\.cn)$\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span> <span class=\"token builtin class-name\">command</span> <span class=\"token parameter variable\">-v</span> aliyun <span class=\"token operator\">></span>/dev/null<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"错误: 你需要先安装 aliyun 命令行工具 https://help.aliyun.com/document_detail/121541.html。\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;2</span>\n\t<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token assign-left variable\">DOMAIN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> match <span class=\"token string\">\"<span class=\"token variable\">$CERTBOT_DOMAIN</span>\"</span> <span class=\"token string\">'.*\\.\\(.*\\..*\\)'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">SUB_DOMAIN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> match <span class=\"token string\">\"<span class=\"token variable\">$CERTBOT_DOMAIN</span>\"</span> <span class=\"token string\">'\\(.*\\)\\..*\\..*'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$CERTBOT_DOMAIN</span> <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-E</span> <span class=\"token parameter variable\">-q</span> <span class=\"token string\">\"<span class=\"token variable\">$FLAG</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\n  <span class=\"token assign-left variable\">DOMAIN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $CERTBOT_DOMAIN <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-oP</span> <span class=\"token string\">'(?&lt;=)[^.]+('</span>$FLAG<span class=\"token string\">')'</span><span class=\"token variable\">`</span></span>\n  <span class=\"token assign-left variable\">SUB_DOMAIN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $CERTBOT_DOMAIN <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-oP</span> <span class=\"token string\">'.*(?=\\.[^.]+('</span>$FLAG<span class=\"token string\">'))'</span><span class=\"token variable\">`</span></span>\n\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$DOMAIN</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">DOMAIN</span><span class=\"token operator\">=</span><span class=\"token variable\">$CERTBOT_DOMAIN</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$SUB_DOMAIN</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">SUB_DOMAIN</span><span class=\"token operator\">=</span>.<span class=\"token variable\">$SUB_DOMAIN</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$#</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\taliyun alidns AddDomainRecord <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--DomainName</span> <span class=\"token variable\">$DOMAIN</span> <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--RR</span> <span class=\"token string\">\"_acme-challenge\"</span><span class=\"token variable\">$SUB_DOMAIN</span> <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--Type</span> <span class=\"token string\">\"TXT\"</span> <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--Value</span> <span class=\"token variable\">$CERTBOT_VALIDATION</span>\n\t/bin/sleep <span class=\"token number\">20</span>\n<span class=\"token keyword\">else</span>\n\t<span class=\"token assign-left variable\">RecordId</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aliyun alidns DescribeDomainRecords <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--DomainName</span> $DOMAIN <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--RRKeyWord</span> <span class=\"token string\">\"_acme-challenge\"</span>$SUB_DOMAIN <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--Type</span> <span class=\"token string\">\"TXT\"</span> <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--ValueKeyWord</span> $CERTBOT_VALIDATION <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"RecordId\"</span> <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-Eo</span> <span class=\"token string\">\"[0-9]+\"</span><span class=\"token variable\">)</span></span>\n\n\taliyun alidns DeleteDomainRecord <span class=\"token punctuation\">\\</span>\n\t\t<span class=\"token parameter variable\">--RecordId</span> <span class=\"token variable\">$RecordId</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Default",
                "证书",
                "nginx"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2022/03/02/idea-plugin/",
            "url": "https://gyoliu.github.io/2022/03/02/idea-plugin/",
            "title": "idea常用插件",
            "date_published": "2022-03-02T04:36:04.000Z",
            "content_html": "<ul>\n<li>alibaba java coding guidelines 代码规范</li>\n<li>git commit template git提交模板</li>\n<li>ide eval reset</li>\n<li>java bean to json</li>\n<li>SequenceDiagram 代码时序图</li>\n<li>SonarLint 代码规范</li>\n<li>Translation 翻译</li>\n<li>JRebel or XRebel 热部署</li>\n<li>RESTfultoolkit</li>\n<li>MyBatisCodeHelper-Pro</li>\n</ul>\n",
            "tags": [
                "Default"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2020/09/08/browser-cookies-SameSite-attribute/",
            "url": "https://gyoliu.github.io/2020/09/08/browser-cookies-SameSite-attribute/",
            "title": "浏览器 SameSite 属性设置",
            "date_published": "2020-09-08T08:58:59.000Z",
            "content_html": "<h3 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1. 起因\"></a>1. 起因</h3><p>Chrome 51 开始，浏览器的 Cookie 新增加了一个SameSite属性，用来防止 CSRF 攻击和用户追踪。<br>Chrome 浏览器版本从 80 版后 默认是将 Cookie 设置成 Lax</p>\n<h3 id=\"2-SameSite-属性值\"><a href=\"#2-SameSite-属性值\" class=\"headerlink\" title=\"2. SameSite 属性值\"></a>2. SameSite 属性值</h3><ul>\n<li>Strict</li>\n<li>Lax</li>\n<li>None<blockquote>\n<p>Strict最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。Lax规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>请求类型</th>\n<th>示例</th>\n<th>正常情况</th>\n<th>Lax</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>链接</td>\n<td>《a href&#x3D;”…”&gt;</td>\n<td>发送 Cookie</td>\n<td>发送 Cookie</td>\n</tr>\n<tr>\n<td>预加载</td>\n<td>《link rel&#x3D;”prerender” href&#x3D;”…”&#x2F;&gt;</td>\n<td>发送 Cookie</td>\n<td>发送 Cookie</td>\n</tr>\n<tr>\n<td>GET 表单</td>\n<td>《form method&#x3D;”GET” action&#x3D;”…”&gt;</td>\n<td>发送Cookie</td>\n<td>发送 Cookie</td>\n</tr>\n<tr>\n<td>POST 表单</td>\n<td>《form method&#x3D;”POST” action&#x3D;”…”&gt;</td>\n<td>发送 Cookie</td>\n<td>不发送</td>\n</tr>\n<tr>\n<td>iframe</td>\n<td>《iframe src&#x3D;”…”&gt;</td>\n<td>发送 Cookie</td>\n<td>不发送</td>\n</tr>\n<tr>\n<td>AJAX</td>\n<td>$.get(“…”)</td>\n<td>发送 Cookie</td>\n<td>不发送</td>\n</tr>\n<tr>\n<td>Image</td>\n<td>《img src&#x3D;”…”》</td>\n<td>发送 Cookie</td>\n<td>不发送</td>\n</tr>\n</tbody></table>\n<p>Chrome 计划将Lax变为默认设置。这时，网站可以选择显式关闭SameSite属性，<strong>将其设为None。不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</strong></p>\n<pre class=\"line-numbers language-language\" data-language=\"language\"><code class=\"language-language\">下面的设置无效。\nSet-Cookie: widget_session&#x3D;abc123; SameSite&#x3D;None\n下面的设置有效。\nSet-Cookie: widget_session&#x3D;abc123; SameSite&#x3D;None; Secure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-该用哪种模式？\"><a href=\"#3-该用哪种模式？\" class=\"headerlink\" title=\"3. 该用哪种模式？\"></a>3. 该用哪种模式？</h3><p>假如你的网站有用 iframe 形式嵌在别的网站里的需求，那么连 Lax 你也不能用，因为 iframe 请求也是一种异步请求。或者假如别的网站有使用你的网站的 JSONP 接口，那么同样 Lax 你也不能用，比如天猫就是通过淘宝的 JSONP 接口来判断用户是否登录的。</p>\n<p>有时安全性和灵活性就是矛盾的，需要取舍。具体判断参照上面表格设置。</p>\n<h3 id=\"4-解决方案\"><a href=\"#4-解决方案\" class=\"headerlink\" title=\"4. 解决方案\"></a>4. 解决方案</h3><h4 id=\"4-1-方案1\"><a href=\"#4-1-方案1\" class=\"headerlink\" title=\"4.1 方案1\"></a>4.1 方案1</h4><ol>\n<li>在chrome浏览器地址栏输入<a href=\"chrome://flags并回车\">chrome://flags并回车</a></li>\n<li>在搜索栏中输入SameSite by default cookies搜索，并禁用如图中的两项设置，改为Disabled即可</li>\n<li>重启浏览器</li>\n</ol>\n<h4 id=\"4-2-方案2\"><a href=\"#4-2-方案2\" class=\"headerlink\" title=\"4.2 方案2\"></a>4.2 方案2</h4><p>如果使用的是 iframe 方式最好设置<br>X-Frame-OptionsHTTP 响应报头可以被用来指示一个浏览器是否应该被允许在一个以呈现页面《frame》，《iframe》或《object》标签。通过确保其内容未嵌入其他网站，网站可以使用此功能来避免 点击劫持 攻击。</p>\n<pre class=\"line-numbers language-language\" data-language=\"language\"><code class=\"language-language\">apache 配置\nHeader always append X-Frame-Options DENY\nHeader set X-Frame-Options &quot;ALLOW-FROM https:&#x2F;&#x2F;example.com&#x2F;&quot;\n\nHeader always edit Set-Cookie &quot;path&#x3D;&#x2F;&quot; &quot;path&#x3D;&#x2F;;  Secure; HttpOnly; SameSite&#x3D;None;&quot; \n\n#apache2.4 官方文档\n#http:&#x2F;&#x2F;httpd.apache.org&#x2F;docs&#x2F;2.4&#x2F;mod&#x2F;mod_session_cookie.html\n#http:&#x2F;&#x2F;httpd.apache.org&#x2F;docs&#x2F;2.4&#x2F;mod&#x2F;mod_usertrack.html\n\n\nNginx 配置\nadd_header X-Frame-Options ALLOWALL; #允许所有域名iframe\nadd_header X-Frame-Options DENY; #不允许任何域名iframe,包括相同的域名\nadd_header X-Frame-Options SANEORIGIN; #允许相同域名iframe,如a.test.com允许b.test.com\nadd_header X-Frame-Options ALLOW-FROM uri; #允许指定域名iframe 多个用逗号分隔\n# 只支持 proxy 模式下设置\nproxy_cookie_path &#x2F; &quot;&#x2F;; httponly; secure; SameSite&#x3D;None&quot;;\n\n#http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_proxy_module.html#proxy_cookie_path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Default"
            ]
        }
    ]
}