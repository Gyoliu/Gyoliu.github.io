{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gyo • All posts by \"spring\" tag",
    "description": "Gyo的博客",
    "home_page_url": "https://gyoliu.github.io",
    "items": [
        {
            "id": "https://gyoliu.github.io/2023/07/20/spring-bean-extension-point/",
            "url": "https://gyoliu.github.io/2023/07/20/spring-bean-extension-point/",
            "title": "spring bean 扩展点记录",
            "date_published": "2023-07-20T05:03:23.000Z",
            "content_html": "<p><img src=\"/img/spring%20bean%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%B5%81%E7%A8%8B-mjrg.png\" alt=\"spring bean实例化流程-mjrg.png\"><br><img src=\"/img/springbean%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"springbean实例化流程图.png\"><br><img src=\"/img/spring%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3%E7%82%B9.png\" alt=\"spring扩展接口点.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// spring 核心代码</span>\n<span class=\"token comment\">// BeanFactoryPostProcessor 接口 ，this.postProcessBeanFactory(beanFactory);</span>\n<span class=\"token comment\">// </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalStateException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>startupShutdownMonitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtainFreshBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initMessageSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">finishBeanFactoryInitialization</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">finishRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeansException</span> var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isWarnEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception encountered during context initialization - cancelling refresh attempt: \"</span> <span class=\"token operator\">+</span> var9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroyBeans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelRefresh</span><span class=\"token punctuation\">(</span>var9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> var9<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetCommonCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"1-BeanFactoryPostProcessor接口\"><a href=\"#1-BeanFactoryPostProcessor接口\" class=\"headerlink\" title=\"1. BeanFactoryPostProcessor接口\"></a>1. BeanFactoryPostProcessor接口</h1><blockquote>\n<p>在容器启动阶段，允许我们在容器实例化 Bean 之前对注册到该容器的 BeanDefinition 做出修改，Spring 为我们提供了几个常用的BeanFactoryPostProcessor，他们是PropertyPlaceholderConfigurer 和 PropertyOverrideConfigurer。在AbstractApplicationContext类的refresh()方法中调用</p>\n</blockquote>\n<h1 id=\"2-BeanDefinitionRegistryPostProcessor\"><a href=\"#2-BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"2. BeanDefinitionRegistryPostProcessor\"></a>2. <strong>BeanDefinitionRegistryPostProcessor</strong></h1><p>BeanDefinitionRegistryPostProcessor是BeanFactoryPostProcessor的子接口，<strong>可以动态注册BeanDefinition到Spring容器</strong>，Spring的注解驱动实现就向容器注入了ConfigurationClassPostProcessor类，ConfigurationClassPostProcessor处理Config的相关注解</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerScannerProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">></span></span> beans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">></span></span> definitionMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> orders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AnnotationBeanNameGenerator</span> beanNameGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationBeanNameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AnnotationScopeMetadataResolver</span> scopeMetadataResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationScopeMetadataResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">BASE_PACKAGES</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"要扫描的包\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> beanDefinitionRegistry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 通过 ClassPathScanningCandidateComponentProvider 扫描相应的类 得到 BeanDefinition</span>\n        <span class=\"token class-name\">ListenerScanner</span> listenerScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListenerScanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">></span></span> beanDefinitions <span class=\"token operator\">=</span> listenerScanner<span class=\"token punctuation\">.</span><span class=\"token function\">doScan</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BASE_PACKAGES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> beanDefinitions<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">BeanDefinition</span> next <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ScopeMetadata</span> scopeMetadata <span class=\"token operator\">=</span> scopeMetadataResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolveScopeMetadata</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> beanName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanNameGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">generateBeanName</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> beanDefinitionRegistry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 判断是否存在相关的 bean </span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCandidate</span><span class=\"token punctuation\">(</span>beanName <span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> beanDefinitionRegistry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">BeanDefinitionHolder</span> definitionHolder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanDefinitionHolder</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">ScopedProxyMode</span> scopedProxyMode <span class=\"token operator\">=</span> scopeMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">getScopedProxyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>scopedProxyMode<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">boolean</span> proxyTargetClass <span class=\"token operator\">=</span> scopedProxyMode<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TARGET_CLASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    definitionHolder <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">createScopedProxy</span><span class=\"token punctuation\">(</span>definitionHolder<span class=\"token punctuation\">,</span> beanDefinitionRegistry<span class=\"token punctuation\">,</span> proxyTargetClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 注入到 spring</span>\n                <span class=\"token class-name\">BeanDefinitionReaderUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>definitionHolder<span class=\"token punctuation\">,</span> beanDefinitionRegistry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            definitionMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            orders<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> <span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token operator\">::</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        collect<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> beans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> definitionMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ScannedGenericBeanDefinition</span> beanDefinition1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ScannedGenericBeanDefinition</span><span class=\"token punctuation\">)</span> beanDefinition<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> attributes <span class=\"token operator\">=</span> beanDefinition1<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Listener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attributes <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> attributes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getBeans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> beans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkCandidate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalStateException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">BeanDefinition</span> existingDef <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">BeanDefinition</span> originatingDef <span class=\"token operator\">=</span> existingDef<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginatingBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>originatingDef <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                existingDef <span class=\"token operator\">=</span> originatingDef<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCompatible</span><span class=\"token punctuation\">(</span>beanDefinition<span class=\"token punctuation\">,</span> existingDef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Annotation-specified bean name '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"' for bean class [\"</span> <span class=\"token operator\">+</span> beanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] conflicts with existing, non-compatible bean definition of same name and class [\"</span> <span class=\"token operator\">+</span> existingDef<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCompatible</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span> newDefinition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinition</span> existingDefinition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>existingDefinition <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ScannedGenericBeanDefinition</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> newDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>existingDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> newDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>existingDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"3-BeanFactoryPostProcessor\"><a href=\"#3-BeanFactoryPostProcessor\" class=\"headerlink\" title=\"3.BeanFactoryPostProcessor\"></a><strong>3.BeanFactoryPostProcessor</strong></h1><p>**通过 **AbstractApplicationContext. refresh() -&gt; this.invokeBeanFactoryPostProcessors(beanFactory); 实例化</p>\n<h1 id=\"4-BeanPostProcessor\"><a href=\"#4-BeanPostProcessor\" class=\"headerlink\" title=\"4.BeanPostProcessor\"></a>4.BeanPostProcessor</h1><p>在 Bean 实例化前后，我们可以通过自定义BeanPostProcessor拦截所有的bean（在bean实例化之前和之后拦截），对bean做增强处理（前、后置处理），相当于bean实例化前后插入了方法</p>\n<ul>\n<li><p>InstantiationAwareBeanPostProcessor 继承自BeanPostProcessor，InstantiationAwareBeanPostProcessor 调用时机是bean实例化（<strong>Instantiation</strong>）阶段，用于替换bean默认创建方式， 主要用于基础框架层面</p>\n</li>\n<li><p><strong>SmartInstantiationAwareBeanPostProcessor</strong></p>\n</li>\n<li><p>MergedBeanDefinitionPostProcessor 主要处理合并后的BeanDefinition，其子类AutowiredAnnotationBeanPostProcessor提供了属性自动注入的功能</p>\n</li>\n<li><p>**AutowiredAnnotationBeanPostProcessor **处理 @Autowired和@Value的属性注入，</p>\n</li>\n<li><p><strong>InitDestroyAnnotationBeanPostProcessor</strong></p>\n</li>\n<li><p>**CommonAnnotationBeanPostProcessor **继承了InitDestroyAnnotationBeanPostProcessor，处理 @Resource 以及几个EJB注解，并且通过setInitAnnotationType设置了参与生命周期的注解（@PostConstruct、@PreDestory）（不过具体调用是在父类#…BeforeInit里调用的，上面说过了）</p>\n<p><strong>@PostConstruct 、InitializingBean和init-method 的调用区别就在这了</strong>，PostConstruct就是在这个InitDestroyAnnotationBeanPostProcessor#BeforeInit** 初始化前置**方法调用的，而像InitializingBean#afterPropertySet则和BPP无关，其是在bean的InitializeBean方法进入即调用的，同时如果调用afterPropertySet出错了，也不会调用init-method了。</p>\n</li>\n<li><p><strong>AbstractAutowireCapableBeanFactory -》</strong>initializeBean()** 在实例化的前后调用 **<em>原理 applyBeanPostProcessorsBeforeInitialization方法和applyBeanPostProcessorsAfterInitialization</em></p>\n</li>\n</ul>\n<h1 id=\"5-Aware接口\"><a href=\"#5-Aware接口\" class=\"headerlink\" title=\"5.Aware接口\"></a>5.<strong>Aware接口</strong></h1><blockquote>\n<p>Aware 接口是 Spring 容器的核心接口，实现了该接口的 bean 会通过事件回调机制完成Spring容器的通知功能；<br>在AbstractAutowireCapableBeanFactory中的initializeBean方法会调用Aware接口的方法</p>\n</blockquote>\n<p><strong>部分 Aware 接口是通过BeanPostProcessor的实现类ApplicationContextAwareProcessor实现的</strong></p>\n<h1 id=\"6-常用的接口\"><a href=\"#6-常用的接口\" class=\"headerlink\" title=\"6.常用的接口\"></a>6.常用的接口</h1><table>\n<thead>\n<tr>\n<th><strong>Aware接口</strong></th>\n<th><strong>注入依赖</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BeanNameAware</td>\n<td>Bean 的名称</td>\n</tr>\n<tr>\n<td>BeanFactoryAware</td>\n<td>当前上下文的 BeanFactory</td>\n</tr>\n<tr>\n<td>ApplicationContextAware</td>\n<td>当前上下文的 ApplicationContext</td>\n</tr>\n<tr>\n<td>ApplicationEventPublisherAware</td>\n<td>当前上下文的事件发布者 ApplicationEventPublisher</td>\n</tr>\n<tr>\n<td>BeanClassLoaderAware</td>\n<td>加载 Bean 类的类加载器</td>\n</tr>\n<tr>\n<td>InstantiationAwareBeanPostProcessor</td>\n<td></td>\n</tr>\n<tr>\n<td>DestructionAwareBeanPostProcessor</td>\n<td></td>\n</tr>\n<tr>\n<td>DisposableBean</td>\n<td></td>\n</tr>\n<tr>\n<td>InitializingBean</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"7-ImportBeanDefinitionRegistrar。实现自己的-EnableXXX\"><a href=\"#7-ImportBeanDefinitionRegistrar。实现自己的-EnableXXX\" class=\"headerlink\" title=\"7.ImportBeanDefinitionRegistrar。实现自己的@EnableXXX\"></a>7.<strong>ImportBeanDefinitionRegistrar。实现自己的@EnableXXX</strong></h1><p>一些组件可以在开启后才进行使用。比如 @EnableAspectJAutoProxy 开启AspectJ支持。原理就是在注解内部Import了一个 ImportBeanDefinitionRegistrar，这个接口也可以帮你注册BeanDefinition到容器中，且优先于上文 BeanDefinitionRegistryPostProcessor 。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FeignClientsRegistrar\nRibbonClientConfigurationRegistrar\nAspectJAutoProxyRegistrar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Java",
                "spring"
            ]
        }
    ]
}