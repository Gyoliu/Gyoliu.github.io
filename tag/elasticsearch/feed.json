{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gyo • All posts by \"elasticsearch\" tag",
    "description": "Gyo的博客",
    "home_page_url": "https://gyoliu.github.io",
    "items": [
        {
            "id": "https://gyoliu.github.io/2022/06/29/elasticsearch-query/",
            "url": "https://gyoliu.github.io/2022/06/29/elasticsearch-query/",
            "title": "elasticsearch 查询",
            "date_published": "2022-06-29T04:47:35.000Z",
            "content_html": "<h1 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">GET &#x2F;_search\n&#123;\n    &quot;from&quot; : 0, &quot;size&quot; : 10,\n    &quot;query&quot; : &#123;\n        &quot;term&quot; : &#123; &quot;user&quot; : &quot;kimchy&quot; &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">POST &#x2F;_search\n&#123;\n   &quot;query&quot; : &#123;\n      &quot;term&quot; : &#123; &quot;product&quot; : &quot;chocolate&quot; &#125;\n   &#125;,\n   &quot;sort&quot; : [\n      &#123;&quot;price&quot; : &#123;&quot;order&quot; : &quot;asc&quot;, &quot;mode&quot; : &quot;avg&quot;&#125;&#125;\n   ]\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"in-或者-not-in-查询\"><a href=\"#in-或者-not-in-查询\" class=\"headerlink\" title=\"in 或者 not in 查询\"></a>in 或者 not in 查询</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">GET &#x2F;kibana_sample_data_logs&#x2F;_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;bool&quot;: &#123;\n    &#x2F;&#x2F; must是：in 查询，must_not：是 not in 查询\n      &quot;must&quot;: [\n        &#123;\n          &quot;terms&quot;: &#123;\n            &quot;clientip&quot;: [&quot;118.151.35.151&quot;, &quot;254.207.11.2&quot;]\n          &#125;\n        &#125;\n      ]\n    &#125;\n  &#125;,\n  &quot;sort&quot;: [\n    &#123;\n      &quot;utc_time&quot;: &#123;\n        &quot;order&quot;: &quot;desc&quot;\n      &#125;\n    &#125;\n  ],\n  &quot;from&quot;: 0, &quot;size&quot;: 20\n&#125;\n\nBoolQueryBuilder boolBuilder &#x3D; QueryBuilders.boolQuery();\nboolBuilder.must(QueryBuilders.matchPhraseQuery(&quot;param&quot;, &quot;1&quot;));\nboolBuilder.must(QueryBuilders.matchPhraseQuery(&quot;param&quot;, &quot;2&quot;));\nboolBuilder.must(QueryBuilders.matchPhraseQuery(&quot;param&quot;, &quot;3&quot;));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"or-and-条件查询\"><a href=\"#or-and-条件查询\" class=\"headerlink\" title=\"or and 条件查询\"></a>or and 条件查询</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.must\n文档 必须 匹配这些条件才能被包含进来。相当于sql中的 and\n2.must_not\n文档 必须不 匹配这些条件才能被包含进来。相当于sql中的 not\n3.should\n如果满足这些语句中的任意语句，将增加 _score ，否则，无任何影响。它们主要用于修正每个文档的相关性得分。相当于sql中的or\n4.filter\n必须 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档。\n\n构造查询条件\n1. termQuery：精确查询（不分词）\n使用termQuery要注意的是，Elasticsearch5之后，取消了string类型，将原来的string类型拆分为text和keyword两种类型，他们的区别在于text会对字段进行分词处理，而keyword则不会。\n2. matchQuery：匹配查询（分词）\nmatch query搜索的时候，首先会解析查询字符串，进行分词，然后查询，所以假如我搜索的条件输入的是&quot;六年级&quot;，则会把各个年级（一年级至九年级）的数据都查询出来，因为其中都包含’年级’ 。\n3. queryString：精确查询\n4. wildcardQuery：模糊查询\n5. rangeQuery：范围查询<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"多字段搜索\"><a href=\"#多字段搜索\" class=\"headerlink\" title=\"多字段搜索\"></a>多字段搜索</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">GET &#x2F;kibana_sample_data_logs&#x2F;_search\n&#123;\n  &quot;query&quot;: &#123;\n    &quot;multi_match&quot;: &#123;\n      &quot;query&quot;: &quot;你好 www.elastic.co Chrome&quot;,\n      &quot;fields&quot;: [&quot;message&quot;, &quot;host&quot;]\n    &#125;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"operator-可以设置为-or-默认-或者-and\"><a href=\"#operator-可以设置为-or-默认-或者-and\" class=\"headerlink\" title=\"operator: 可以设置为 or(默认) 或者 and\"></a>operator: 可以设置为 or(默认) 或者 and</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">和分词有关系：\n如：数据是：万里长城真伟大\n分词后：[&quot;万里长城&quot;, &quot;万里&quot;,&quot;万&quot;,&quot;里长&quot;,&quot;里&quot;,&quot;长城&quot; ...]\n为or时：\n索引库中，只要文档的content这个字段内容包含“万里长城”，“里”，“真”，“伟大”等任何一个分词，该条文档就会被索引到。\n\n为and时：\n索引库中，文档的content这个字段必须包含“万里长城”，“里”，“真”，“伟大”等所有分词 ，这就是and。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"java-api\"><a href=\"#java-api\" class=\"headerlink\" title=\"java api\"></a>java api</h1><p><a href=\"https://www.bbsmax.com/A/B0zqrrEZJv/\">java api</a></p>\n<h1 id=\"注意点-RefreshPolicy\"><a href=\"#注意点-RefreshPolicy\" class=\"headerlink\" title=\"注意点 RefreshPolicy\"></a>注意点 RefreshPolicy</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">默认情况下ElasticSearch索引的refresh_interval为1秒，这意味着数据写1秒才就可以被搜索到。\n\n每次索引refresh会产生一个新的 lucene 段，这会导致频繁的 segment merge 行为，对系统 CPU 和 IO 占用都比较高。\n\n如果产品对于实时性要求不高，则可以降低刷新周期，如：index.refresh_interval: 120s。\n\n但是这种特性对于功能测试来说比较麻烦：\n\n因为实时性不能保证，所以每次插入测试数据之后，都需要sleep一段时间，才能进行测试。\n因为实时性不能保证，及时通过sleep策略通过的case，也可能偶尔失败。\n为了解决上述问题，需要提供ElasticSearch增删改数据之后数据立即刷新的策略。\n可知有以下三种刷新策略：\n\nRefreshPolicy#IMMEDIATE:\n请求向ElasticSearch提交了数据，立即进行数据刷新，然后再结束请求。\n优点：实时性高、操作延时短。\n缺点：资源消耗高。\nRefreshPolicy#WAIT_UNTIL:\n请求向ElasticSearch提交了数据，等待数据完成刷新，然后再结束请求。\n优点：实时性高、操作延时长。\n缺点：资源消耗低。\nRefreshPolicy#NONE:\n默认策略。\n请求向ElasticSearch提交了数据，不关系数据是否已经完成刷新，直接结束请求。\n优点：操作延时短、资源消耗低。\n缺点：实时性低\nupdateRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);\n每笔500ms以上，特别影响性能。尽量不要使用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "Java",
                "elasticsearch"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2022/06/27/elasticsearch-setting/",
            "url": "https://gyoliu.github.io/2022/06/27/elasticsearch-setting/",
            "title": "elasticsearch重要的设置",
            "date_published": "2022-06-27T04:44:51.000Z",
            "content_html": "<h1 id=\"1-堆大小检查\"><a href=\"#1-堆大小检查\" class=\"headerlink\" title=\"1. 堆大小检查\"></a>1. 堆大小检查</h1><blockquote>\n<p>如果 JVM 以不相等的初始堆大小和最大堆大小启动，则在系统使用期间调整 JVM 堆的大小时，它很容易出现暂停。为避免这些调整大小暂停，最好在初始堆大小等于最大堆大小的情况下启动 JVM。此外，如果 bootstrap.memory_lock启用，JVM 将在启动时锁定堆的初始大小。如果初始堆大小不等于最大堆大小，则在调整大小后，所有 JVM 堆都不会锁定在内存中。要通过堆大小检查，您必须配置堆大小。<br>-xms: 1g &#x2F;&#x2F; 最小堆内存<br>-xmx: 1g &#x2F;&#x2F; 最大堆内存</p>\n</blockquote>\n<h1 id=\"2-文件描述符\"><a href=\"#2-文件描述符\" class=\"headerlink\" title=\"2. 文件描述符\"></a>2. 文件描述符</h1><blockquote>\n<p>Elasticsearch 需要大量文件描述符（例如，每个分片由多个段和其他文件组成，加上与其他节点的连接等）。此引导检查在 OS X 和 Linux 上强制执行。要通过文件描述符检查，您可能必须配置文件描述符。<br><a href=\"https://blog.csdn.net/qq_32348883/article/details/124265412\">https://blog.csdn.net/qq_32348883/article/details/124265412</a><br>ulimit -n 65535</p>\n</blockquote>\n<h1 id=\"3-内存锁定检查\"><a href=\"#3-内存锁定检查\" class=\"headerlink\" title=\"3. 内存锁定检查\"></a>3. 内存锁定检查</h1><blockquote>\n<p>当 JVM 进行主要的垃圾回收时，它会触及堆的每一页。如果这些页面中的任何一个被换出到磁盘，则必须将它们换回内存。这会导致大量磁盘抖动，而 Elasticsearch 更愿意使用它来服务请求。有几种方法可以配置系统以禁止交换。一种方法是请求 JVM 通过mlockall(Unix) 或虚拟锁 (Windows) 将堆锁定在内存中。这是通过 Elasticsearch 设置完成的 bootstrap.memory_lock。但是，在某些情况下，可以将此设置传递给 Elasticsearch，但 Elasticsearch 无法锁定堆（例如，如果elasticsearch 用户没有memlock unlimited. 内存锁检查验证是否bootstrap.memory_lock设置已启用，JVM 已成功锁定堆。要通过内存锁定检查，您可能必须配置<br>bootstrap.memory_lock</p>\n</blockquote>\n<h1 id=\"4-最大线程数设置\"><a href=\"#4-最大线程数设置\" class=\"headerlink\" title=\"4. 最大线程数设置\"></a>4. 最大线程数设置</h1><blockquote>\n<p>Elasticsearch 通过将请求分解为多个阶段并将这些阶段交给不同的线程池执行器来执行请求。Elasticsearch 中的各种任务都有不同的线程池执行器。因此，Elasticsearch 需要能够创建大量线程。最大线程数检查确保 Elasticsearch 进程在正常使用情况下有权创建足够多的线程。此检查仅在 Linux 上强制执行。如果您在 Linux 上，要通过最大线程数检查，您必须配置您的系统以允许 Elasticsearch 进程能够创建至少 <strong>4096</strong> 个线程。这可以通过&#x2F;etc&#x2F;security&#x2F;limits.conf 使用nproc设置来完成<br>ulimit -u 4096</p>\n</blockquote>\n<h1 id=\"5-文件大小设置\"><a href=\"#5-文件大小设置\" class=\"headerlink\" title=\"5. 文件大小设置\"></a>5. 文件大小设置</h1><blockquote>\n<p>作为单个分片组件的段文件和作为 translog 组件的 translog 生成可能会变得很大（超过数 GB）。在 Elasticsearch 进程可以创建的最大文件大小受到限制的系统上，这可能会导致写入失败。因此，这里最安全的选择是最大文件大小是无限的，这就是最大文件大小引导检查所强制执行的。要通过最大文件检查，您必须将系统配置为允许 Elasticsearch 进程写入无限大小的文件。这可以通过 &#x2F;etc&#x2F;security&#x2F;limits.conf使用fsize设置来完成unlimited</p>\n</blockquote>\n<h1 id=\"6-最大大小虚拟内存检查\"><a href=\"#6-最大大小虚拟内存检查\" class=\"headerlink\" title=\"6. 最大大小虚拟内存检查\"></a>6. 最大大小虚拟内存检查</h1><blockquote>\n<p>Elasticsearch 和 Lucene 用于mmap将索引的一部分映射到 Elasticsearch 地址空间，效果非常好。这使某些索引数据远离 JVM 堆，但在内存中以实现极快的访问。为使其有效，Elasticsearch 应具有无限的地址空间。最大大小虚拟内存检查强制 Elasticsearch 进程具有无限的地址空间，并且仅在 Linux 上强制执行。要通过最大大小虚拟内存检查，您必须将系统配置为允许 Elasticsearch 进程拥有无限地址空间的能力。这可以通过&#x2F;etc&#x2F;security&#x2F;limits.conf使用as设置来完成unlimited</p>\n</blockquote>\n<h1 id=\"7-max-map-count文件包含限制一个进程可以拥有的VMA-虚拟内存区域-的数量\"><a href=\"#7-max-map-count文件包含限制一个进程可以拥有的VMA-虚拟内存区域-的数量\" class=\"headerlink\" title=\"7. max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量\"></a>7. max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量</h1><blockquote>\n<p>Elasticsearch 还需要能够创建许多内存映射区域。最大映射计数检查检查内核是否允许进程具有至少 262,144 个内存映射区域，并且仅在 Linux 上强制执行。要通过最大地图计数检查，您必须将vm.max_map_count 配置 sysctl 为至少262144.</p>\n</blockquote>\n<h1 id=\"8-系统调用过滤检查\"><a href=\"#8-系统调用过滤检查\" class=\"headerlink\" title=\"8. 系统调用过滤检查\"></a>8. 系统调用过滤检查</h1><blockquote>\n<p>Elasticsearch 会根据操作系统（例如，Linux 上的 seccomp）安装各种风格的系统调用过滤器。安装这些系统调用过滤器是为了防止执行与分叉相关的系统调用，以此作为防御机制来抵御对 Elasticsearch 的任意代码执行攻击。系统调用过滤器检查确保如果启用了系统调用过滤器，则它们已成功安装。要通过系统调用过滤器检查，您必须修复系统上阻止系统调用过滤器安装的任何配置错误（检查您的日志），或者通过设置为来自行承担禁用系统调用过滤器的风险。bootstrap.system_call_filter: false</p>\n</blockquote>\n<h1 id=\"9-elasticsearch-yml\"><a href=\"#9-elasticsearch-yml\" class=\"headerlink\" title=\"9. elasticsearch.yml\"></a>9. elasticsearch.yml</h1><table>\n<thead>\n<tr>\n<th>配置key</th>\n<th>配置value</th>\n<th>说明</th>\n<th>example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>path.logs</td>\n<td>&#x2F;var&#x2F;log&#x2F;elasticsearch</td>\n<td>日志保存的文件路径</td>\n<td></td>\n</tr>\n<tr>\n<td>path.data</td>\n<td>&#x2F;var&#x2F;data&#x2F;elasticsearch</td>\n<td>数据保存的文件路径</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://cluster.name/\">cluster.name</a></td>\n<td>myes</td>\n<td>集群名称</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://node.name/\">node.name</a></td>\n<td>node1</td>\n<td>节点名称</td>\n<td>node.name&#x3D;${} HOSTNAME</td>\n</tr>\n<tr>\n<td>network.host</td>\n<td>192.168.1.1</td>\n<td>网络IP设置</td>\n<td></td>\n</tr>\n<tr>\n<td>discovery.zen.ping.unicast.hosts</td>\n<td>[“192.168.1.11”,“192.168.1.12”,“192.168.1.13”]</td>\n<td>集群发现其他节点机器配置</td>\n<td></td>\n</tr>\n<tr>\n<td>discovery.zen.minimum_master_nodes</td>\n<td>2</td>\n<td>避免脑裂设置，设置形成集群最少需要的票数。计算公式：(master_eligible_nodes &#x2F; 2) + 1 必须超过所有机器的一半</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"10-jvm-options\"><a href=\"#10-jvm-options\" class=\"headerlink\" title=\"10. jvm.options\"></a>10. jvm.options</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">设置Xms和Xmx不超过物理 RAM 的 50%，以确保有足够的物理 RAM 留给内核文件系统缓存。\n- Xms2g \n- Xmx2g\n\n请注意，Elasticsearch 附带的默认 JVM 配置将 Elasticsearch 配置为使用 CMS 收集器。\n-XX:+UseSerialGC<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "Java",
                "elasticsearch"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2022/05/18/elasticsearch8-2-install/",
            "url": "https://gyoliu.github.io/2022/05/18/elasticsearch8-2-install/",
            "title": "elasticsearch8.2集群安装部署",
            "date_published": "2022-05-18T04:41:39.000Z",
            "content_html": "<h1 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"- 1. 下载\"></a>- 1. 下载</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">[elasticsearch下载地址](https:&#x2F;&#x2F;www.elastic.co&#x2F;start)\n[elasticsearch下载地址](https:&#x2F;&#x2F;www.elastic.co&#x2F;downloads&#x2F;elasticsearch)\n[elasticsearch版本支持](https:&#x2F;&#x2F;www.elastic.co&#x2F;support&#x2F;matrix)\n\n[elastic8.2 文档](https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;reference&#x2F;8.2&#x2F;index.html)\n[中文文档（有些东西可能过时）](https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;cn&#x2F;elasticsearch&#x2F;guide&#x2F;current&#x2F;index.html)\n[elasticsearch概念介绍](http:&#x2F;&#x2F;t.zoukankan.com&#x2F;kevingrace-p-10682264.html)\n[运维指南](https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1836799)\n[客户端](https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;client&#x2F;index.html)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"2-集群配置文件\"><a href=\"#2-集群配置文件\" class=\"headerlink\" title=\"- 2. 集群配置文件\"></a>- 2. 集群配置文件</h1><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">cluster.name</span><span class=\"token punctuation\">:</span> myes\n<span class=\"token key atrule\">node.name</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n<span class=\"token key atrule\">network.host</span><span class=\"token punctuation\">:</span> 127.0.0.1\n<span class=\"token comment\">#transport.tcp.port: 9300</span>\n<span class=\"token key atrule\">http.port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9200</span>\n<span class=\"token key atrule\">http.cors.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">http.cors.allow-origin</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n<span class=\"token key atrule\">discovery.seed_hosts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"127.0.0.1:9300\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1:9301\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"127.0.0.1:9302\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">cluster.initial_master_nodes</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"127.0.0.1:9300\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1:9301\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"127.0.0.1:9302\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">path.data</span><span class=\"token punctuation\">:</span> ./data\n<span class=\"token key atrule\">path.logs</span><span class=\"token punctuation\">:</span> ./logs\n<span class=\"token comment\"># 不需要认证设置成 false </span>\n<span class=\"token key atrule\">xpack.security.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">xpack.security.transport.ssl.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">xpack.security.transport.ssl.verification_mode</span><span class=\"token punctuation\">:</span> certificate\n<span class=\"token comment\"># 证书的位置</span>\n<span class=\"token key atrule\">xpack.security.transport.ssl.keystore.path</span><span class=\"token punctuation\">:</span> certs/elastic<span class=\"token punctuation\">-</span>certificates.p12\n<span class=\"token key atrule\">xpack.security.transport.ssl.truststore.path</span><span class=\"token punctuation\">:</span> certs/elastic<span class=\"token punctuation\">-</span>certificates.p12\n注意 ：在一台机器上生成 elastic<span class=\"token punctuation\">-</span>certificates.p12 后，将文件复制到其他机器上不能重新生成<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"3-集群认证设置\"><a href=\"#3-集群认证设置\" class=\"headerlink\" title=\"- 3. 集群认证设置\"></a>- 3. 集群认证设置</h1><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">1. 配置文件需设置\n<span class=\"token key atrule\">xpack.security.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">xpack.security.transport.ssl.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">xpack.security.transport.ssl.verification_mode</span><span class=\"token punctuation\">:</span> certificate\n<span class=\"token key atrule\">xpack.security.transport.ssl.keystore.path</span><span class=\"token punctuation\">:</span> certs/elastic<span class=\"token punctuation\">-</span>certificates.p12\n<span class=\"token key atrule\">xpack.security.transport.ssl.truststore.path</span><span class=\"token punctuation\">:</span> certs/elastic<span class=\"token punctuation\">-</span>certificates.p12\n2. 生成通讯证书\n./bin/elasticsearch<span class=\"token punctuation\">-</span>certutil ca\n./bin/elasticsearch<span class=\"token punctuation\">-</span>certutil cert <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>ca elastic<span class=\"token punctuation\">-</span>stack<span class=\"token punctuation\">-</span>ca.p12\nmkdir config/certs\nmv <span class=\"token important\">*.p12</span> config/certs\n3. 所有节点设置节点通信密码（因每个节点使用相同的证书文件）\n必须设置所有集群的证书密码\n./bin/elasticsearch<span class=\"token punctuation\">-</span>keystore add xpack.security.transport.ssl.keystore.secure_password\n./bin/elasticsearch<span class=\"token punctuation\">-</span>keystore add xpack.security.transport.ssl.truststore.secure_password\n4. 设置账号密码，elastic 集群内置的一些账号密码\n./bin/elasticsearch<span class=\"token punctuation\">-</span>setup<span class=\"token punctuation\">-</span>passwords interactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"4-java-lang-RuntimeException-can-not-run-elasticsearch-as-root\"><a href=\"#4-java-lang-RuntimeException-can-not-run-elasticsearch-as-root\" class=\"headerlink\" title=\"- 4. java.lang.RuntimeException: can not run elasticsearch as root\"></a>- 4. java.lang.RuntimeException: can not run elasticsearch as root</h1><pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">groupadd elastic\nuseradd elastic -g elastic\npasswd elastic\nchown -R elastic:elastic elasticsearch-8.2.0\nsu elastic\n.&#x2F;bin&#x2F;elasticsearch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"5-org-elasticsearch-ElasticsearchException-Failure-running-machine-learning-native-code-This-could-be-due-to-running-on-an-unsupported-OS-or-distribution-missing-OS-libraries-or-a-problem-with-the-temp-directory-To-bypass-this-problem-by-running-Elasticsearch-without-machine-learning-functionality-set-xpack-ml-enabled-false\"><a href=\"#5-org-elasticsearch-ElasticsearchException-Failure-running-machine-learning-native-code-This-could-be-due-to-running-on-an-unsupported-OS-or-distribution-missing-OS-libraries-or-a-problem-with-the-temp-directory-To-bypass-this-problem-by-running-Elasticsearch-without-machine-learning-functionality-set-xpack-ml-enabled-false\" class=\"headerlink\" title=\"- 5. org.elasticsearch.ElasticsearchException: Failure running machine learning native code. This could be due to running on an unsupported OS or distribution, missing OS libraries, or a problem with the temp directory. To bypass this problem by running Elasticsearch without machine learning functionality set [xpack.ml.enabled: false].\"></a>- 5. org.elasticsearch.ElasticsearchException: Failure running machine learning native code. This could be due to running on an unsupported OS or distribution, missing OS libraries, or a problem with the temp directory. To bypass this problem by running Elasticsearch without machine learning functionality set [xpack.ml.enabled: false].</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">编辑：config\\elasticsearch.yml\n增加配置：xpack.ml.enabled: false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"6-bootstrap-check-failure-1-of-2-max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144\"><a href=\"#6-bootstrap-check-failure-1-of-2-max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144\" class=\"headerlink\" title=\"- 6. bootstrap check failure [1] of [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\"></a>- 6. bootstrap check failure [1] of [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">修改：sysctl -w vm.max_map_count&#x3D;262144\n查看：sysctl -a | grep vm.max_map_count<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"7-bootstrap-check-failure-1-of-1-system-call-filters-failed-to-install-check-the-logs-and-fix-your-configuration\"><a href=\"#7-bootstrap-check-failure-1-of-1-system-call-filters-failed-to-install-check-the-logs-and-fix-your-configuration\" class=\"headerlink\" title=\"- 7. bootstrap check failure [1] of [1]: system call filters failed to install; check the logs and fix your configuration\"></a>- 7. bootstrap check failure [1] of [1]: system call filters failed to install; check the logs and fix your configuration</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">修改： config\\elasticsearch.yml\nbootstrap.memory_lock: false\nbootstrap.system_call_filter: false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"8-查询-ES-集群状态\"><a href=\"#8-查询-ES-集群状态\" class=\"headerlink\" title=\"- 8. 查询 ES 集群状态\"></a>- 8. 查询 ES 集群状态</h1><p><a href=\"https://www.cnblogs.com/aping-blog/p/16066928.html\">https://www.cnblogs.com/aping-blog/p/16066928.html</a></p>\n<p><a href=\"/archives/elasticsearch-zhong-yao-de-she-zhi\" title=\"elasticsearch重要的设置\">上一篇 </a><a href=\"/archives/oauth2jwt\" title=\"oauth2 jwt\">下一篇</a></p>\n",
            "tags": [
                "Java",
                "elasticsearch"
            ]
        }
    ]
}