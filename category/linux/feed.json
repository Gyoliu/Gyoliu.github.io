{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gyo • All posts by \"linux\" category",
    "description": "Gyo的博客",
    "home_page_url": "https://gyoliu.github.io",
    "items": [
        {
            "id": "https://gyoliu.github.io/2024/01/29/centos-disk/",
            "url": "https://gyoliu.github.io/2024/01/29/centos-disk/",
            "title": "centos 磁盘挂载",
            "date_published": "2024-01-29T05:10:53.000Z",
            "content_html": "<h3 id=\"查看磁盘：\"><a href=\"#查看磁盘：\" class=\"headerlink\" title=\"查看磁盘：\"></a>查看磁盘：</h3><blockquote>\n<p>lsblk</p>\n</blockquote>\n<h3 id=\"格式化磁盘：\"><a href=\"#格式化磁盘：\" class=\"headerlink\" title=\"格式化磁盘：\"></a>格式化磁盘：</h3><blockquote>\n<p>fdisk &#x2F;dev&#x2F;sdb<br>n-&gt;p-&gt;1-&gt;回车-&gt;回车-&gt;w</p>\n</blockquote>\n<h3 id=\"创建磁盘：\"><a href=\"#创建磁盘：\" class=\"headerlink\" title=\"创建磁盘：\"></a>创建磁盘：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkfs.xfs /dev/sdb1\n<span class=\"token function\">mkdir</span> /app\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/dev/sdb1 /app xfs defaults 0 0\"</span> <span class=\"token operator\">>></span> /etc/fstab\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-a</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"LVM-磁盘管理\"><a href=\"#LVM-磁盘管理\" class=\"headerlink\" title=\"LVM 磁盘管理\"></a>LVM 磁盘管理</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">sudo</span> vgdisplay  <span class=\"token comment\"># 查看卷组剩余空间</span>\n<span class=\"token function\">sudo</span> lvdisplay  <span class=\"token comment\"># 查看逻辑卷详情</span>\n\n方法一：直接扩展现有逻辑卷（推荐）\n<span class=\"token comment\"># 扩展逻辑卷到最大可用空间（保留所有剩余空间）</span>\n<span class=\"token function\">sudo</span> lvextend <span class=\"token parameter variable\">-l</span> +100%FREE /dev/ubuntu-vg/ubuntu-lv\n\n<span class=\"token comment\"># 调整文件系统大小（ext4 适用）</span>\n<span class=\"token function\">sudo</span> resize2fs /dev/ubuntu-vg/ubuntu-lv\n\n<span class=\"token comment\"># 验证</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> /dev/mapper/ubuntu--vg-ubuntu--lv\n\n\n方法二：创建新逻辑卷（如需独立挂载）‌\n\n<span class=\"token comment\"># 创建新逻辑卷（命名为 new-lv，分配 100G）</span>\n<span class=\"token function\">sudo</span> lvcreate <span class=\"token parameter variable\">-n</span> new-lv <span class=\"token parameter variable\">-L</span> 100G ubuntu-vg\n\n<span class=\"token comment\"># 格式化</span>\n<span class=\"token function\">sudo</span> mkfs.ext4 /dev/ubuntu-vg/new-lv\n\n<span class=\"token comment\"># 挂载到目录（如 /mnt/data）</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mnt/data\n<span class=\"token function\">sudo</span> <span class=\"token function\">mount</span> /dev/ubuntu-vg/new-lv /mnt/data\n\n<span class=\"token comment\"># 开机自动挂载</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'/dev/ubuntu-vg/new-lv /mnt/data ext4 defaults 0 2'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/fstab\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"LVM-收缩逻辑卷（缩小磁盘空间）\"><a href=\"#LVM-收缩逻辑卷（缩小磁盘空间）\" class=\"headerlink\" title=\"LVM 收缩逻辑卷（缩小磁盘空间）\"></a>LVM 收缩逻辑卷（缩小磁盘空间）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">‌1. 前提条件‌\n‌文件系统支持收缩‌：仅 ext2/3/4 和 xfs（有限支持）可缩小，且需先缩小文件系统，再缩小逻辑卷‌\n‌数据备份‌：收缩操作可能导致数据丢失，‌必须提前备份重要数据‌‌68。\n‌剩余空间检查‌：确保目标容量足够存放现有数据。\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">umount</span> /mnt/data  <span class=\"token comment\"># 如果逻辑卷已挂载，需先卸载</span>\n<span class=\"token function\">sudo</span> e2fsck <span class=\"token parameter variable\">-f</span> /dev/vg_name/lv_name  <span class=\"token comment\"># 强制检查 ext4 文件系统</span>\n<span class=\"token function\">sudo</span> resize2fs /dev/vg_name/lv_name 50G  <span class=\"token comment\"># 将文件系统缩小到 50G</span>\n<span class=\"token function\">sudo</span> lvreduce <span class=\"token parameter variable\">-L</span> 50G /dev/vg_name/lv_name  <span class=\"token comment\"># 将逻辑卷缩小到 50G</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mount</span> /dev/vg_name/lv_name /mnt/data <span class=\"token comment\"># 重新挂载（如果之前卸载）</span>\n<span class=\"token comment\"># 验证</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> lv_name  <span class=\"token comment\"># 检查文件系统大小</span>\n<span class=\"token function\">sudo</span> lvdisplay /dev/vg_name/lv_name  <span class=\"token comment\"># 检查逻辑卷大小</span>\n\n\n场景 <span class=\"token number\">1</span>：缩小根分区（/）‌\n‌必须从 Live CD/USB 启动‌，因为根分区无法卸载‌\n<span class=\"token function\">sudo</span> lvresize <span class=\"token parameter variable\">--resizefs</span> <span class=\"token parameter variable\">-L</span> 50G /dev/ubuntu-vg/ubuntu-lv  <span class=\"token comment\"># 自动调整文件系统和逻辑卷</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"在已创建新逻辑卷后再次扩容的完整步骤\"><a href=\"#在已创建新逻辑卷后再次扩容的完整步骤\" class=\"headerlink\" title=\"在已创建新逻辑卷后再次扩容的完整步骤\"></a>在已创建新逻辑卷后再次扩容的完整步骤</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> vgdisplay ubuntu-vg  <span class=\"token comment\"># 查看卷组剩余空间（Free PE / Size）</span>\n场景 <span class=\"token number\">1</span>：卷组仍有剩余空间\n<span class=\"token comment\"># 将 /dev/ubuntu-vg/data 扩容 20G（根据需求调整）</span>\n<span class=\"token function\">sudo</span> lvextend <span class=\"token parameter variable\">-L</span> +20G /dev/ubuntu-vg/data\n<span class=\"token comment\"># 调整文件系统（ext4 示例）</span>\n<span class=\"token function\">sudo</span> resize2fs /dev/ubuntu-vg/data\n\n\n场景 <span class=\"token number\">2</span>：卷组无剩余空间（需先扩展物理卷）\n‌步骤 <span class=\"token number\">1</span>：扩展物理卷（PV）\n<span class=\"token comment\"># 查看物理卷路径（通常为 /dev/sda3）</span>\n<span class=\"token function\">sudo</span> pvdisplay\n<span class=\"token comment\"># 扩展物理卷边界（假设 /dev/sda3 是 PV）</span>\n<span class=\"token function\">sudo</span> pvresize /dev/sda3\n‌步骤 <span class=\"token number\">2</span>：确认卷组空间更新\n<span class=\"token function\">sudo</span> vgdisplay ubuntu-vg  <span class=\"token comment\"># 此时应显示新的 Free PE / Size</span>\n步骤 <span class=\"token number\">3</span>：扩容逻辑卷\n<span class=\"token function\">sudo</span> lvextend <span class=\"token parameter variable\">-L</span> +30G /dev/ubuntu-vg/data  <span class=\"token comment\"># 增加 30G</span>\n<span class=\"token function\">sudo</span> resize2fs /dev/ubuntu-vg/data         <span class=\"token comment\"># 调整文件系统</span>\n\n‌3. 高级操作：从磁盘新增物理卷‌\n若物理磁盘 /dev/sda 已无剩余空间，需添加新磁盘（如 /dev/sdb）：\n<span class=\"token comment\"># 创建新分区并设为 LVM 类型（通过 fdisk/gdisk）</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">fdisk</span> /dev/sdb  <span class=\"token comment\"># 创建新分区（如 /dev/sdb1），类型代码 8e（Linux LVM）</span>\n\n<span class=\"token comment\"># 初始化物理卷</span>\n<span class=\"token function\">sudo</span> pvcreate /dev/sdb1\n\n<span class=\"token comment\"># 扩展卷组</span>\n<span class=\"token function\">sudo</span> vgextend ubuntu-vg /dev/sdb1\n\n<span class=\"token comment\"># 此时可继续扩展逻辑卷</span>\n<span class=\"token function\">sudo</span> lvextend <span class=\"token parameter variable\">-L</span> +50G /dev/ubuntu-vg/data\n<span class=\"token function\">sudo</span> resize2fs /dev/ubuntu-vg/data\n<span class=\"token comment\"># 验证</span>\n<span class=\"token comment\"># 检查逻辑卷大小</span>\n<span class=\"token function\">sudo</span> lvdisplay /dev/ubuntu-vg/data <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"LV Size\"</span>\n<span class=\"token comment\"># 检查文件系统大小</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> /挂载点  <span class=\"token comment\"># 如 /data</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2022/09/20/openssl-install/",
            "url": "https://gyoliu.github.io/2022/09/20/openssl-install/",
            "title": "openssl 编译安装",
            "date_published": "2022-09-20T04:53:56.000Z",
            "content_html": "<h2 id=\"1-官方下载地址\"><a href=\"#1-官方下载地址\" class=\"headerlink\" title=\"1. 官方下载地址\"></a>1. 官方下载地址</h2><p><a href=\"https://www.openssl.org/source/\">https://www.openssl.org/source/</a></p>\n<h2 id=\"2-依赖安装\"><a href=\"#2-依赖安装\" class=\"headerlink\" title=\"2. 依赖安装\"></a>2. 依赖安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> gcc libffi-devel zlib* openssl-devel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"3-编译\"><a href=\"#3-编译\" class=\"headerlink\" title=\"3. 编译\"></a>3. 编译</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./config <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/openssl shared zlib\n其中 <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/openssl  指定编译到那个目录下\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-备份\"><a href=\"#4-备份\" class=\"headerlink\" title=\"4. 备份\"></a>4. 备份</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">which</span> openssl  或  <span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> openssl\n <span class=\"token function\">mv</span> /usr/bin/openssl /usr/bin/openssl.1.0.1e\n <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-建立软连接\"><a href=\"#5-建立软连接\" class=\"headerlink\" title=\"5. 建立软连接\"></a>5. 建立软连接</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /usr/local/openssl/bin/openssl /usr/bin/openssl\n<span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /usr/local/openssl/include/openssl /usr/include/openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-设定动态链接库\"><a href=\"#6-设定动态链接库\" class=\"headerlink\" title=\"6. 设定动态链接库\"></a>6. 设定动态链接库</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/usr/local/openssl/lib\"</span> <span class=\"token operator\">>></span> /etc/ld.so.conf\nldconfig <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-验证\"><a href=\"#7-验证\" class=\"headerlink\" title=\"7. 验证\"></a>7. 验证</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl version <span class=\"token parameter variable\">-a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n",
            "tags": [
                "Linux",
                "openssl"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2021/02/18/Linux-process-disappears/",
            "url": "https://gyoliu.github.io/2021/02/18/Linux-process-disappears/",
            "title": "Linux服务器Java进程突然消失",
            "date_published": "2021-02-18T01:55:53.000Z",
            "content_html": "<h3 id=\"检查应用日志是否有异常日志\"><a href=\"#检查应用日志是否有异常日志\" class=\"headerlink\" title=\"检查应用日志是否有异常日志\"></a>检查应用日志是否有异常日志</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"> -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;$&#123;目录&#125;。\n参数说明：\n（1）-XX:+HeapDumpOnOutOfMemoryError参数表示当JVM发生OOM时，自动生成DUMP文件。\n（2）-XX:HeapDumpPath&#x3D;$&#123;目录&#125;参数表示生成DUMP文件的路径，也可以指定文件名称。\n例如：-XX:HeapDumpPath&#x3D;$&#123;目录&#125;&#x2F;java_heapdump.hprof。如果不指定文件名，默认为：java_&lt;pid&gt;_&lt;date&gt;_&lt;time&gt;_heapDump.hprof。\n**之后可以通过一些分析工具查看应用问题**<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"检查-JVM-是否异常\"><a href=\"#检查-JVM-是否异常\" class=\"headerlink\" title=\"检查 JVM 是否异常\"></a>检查 JVM 是否异常</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">启动应用时最好指：XX:ErrorFile&#x3D;&#x2F;var&#x2F;log&#x2F;hs_err_pid&lt;pid&gt;.log，没有指定是生成在工作目录下<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"被操作系统OOM-Killer\"><a href=\"#被操作系统OOM-Killer\" class=\"headerlink\" title=\"被操作系统OOM-Killer\"></a>被操作系统OOM-Killer</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">Linux 内核有个机制叫OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。\n因此，你发现java进程突然没了，首先要怀疑是不是被linux的OOM killer给干掉了！\n系统报错日志:&#x2F;var&#x2F;log&#x2F;messages\n\ngrep -i &#39;killed process&#39; &#x2F;var&#x2F;log&#x2F;messages  \n-i 是忽略大小写\n或者\ngrep &#39;Out of memory&#39; &#x2F;var&#x2F;log&#x2F;messages\n\ndmesg -T| grep java\n#或者\ndmesg -T | grep &#39;Out of memory&#39;\n# -T 是显示时间戳<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>　检查了下监控，发现外网大量的流程导致操作系统 kill 了进程。 <img src=\"/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%8720210218115721.png\" alt=\"微信图片20210218115721.png\"></p>\n</blockquote>\n<h3 id=\"解决方案-Linux-Swap-针对小内存服务器\"><a href=\"#解决方案-Linux-Swap-针对小内存服务器\" class=\"headerlink\" title=\"解决方案 -&gt; Linux Swap , 针对小内存服务器\"></a>解决方案 -&gt; Linux Swap , 针对小内存服务器</h3><blockquote>\n<p>SWAP 概述 当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。</p>\n</blockquote>\n<blockquote>\n<p>swap 的大小设置一般是和内存大小一样或者设置为内存大小的2倍<br>实际上，并不是等所有的物理内存都消耗完毕之后，才去使用swap的空间，什么时候使用是由swappiness 参数值控制。 cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness 60 该值默认值是60. swappiness&#x3D;0的时候表示最大限度使用物理内存，然后才是 swap空间，<br>swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。<br>永久修改： 在&#x2F;etc&#x2F;sysctl.conf 文件里添加如下参数： vm.swappiness&#x3D;10<br>sysctl -p 生效</p>\n</blockquote>\n<h3 id=\"开启-Swap\"><a href=\"#开启-Swap\" class=\"headerlink\" title=\"开启 Swap\"></a>开启 Swap</h3><p><a href=\"https://blog.csdn.net/ygm_linux/article/details/24532809\">https://blog.csdn.net/ygm_linux/article/details/24532809</a><br><a href=\"https://www.cnblogs.com/williamjie/p/10271347.html\">https://www.cnblogs.com/williamjie/p/10271347.html</a></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2021/01/28/linux-delete-big-file/",
            "url": "https://gyoliu.github.io/2021/01/28/linux-delete-big-file/",
            "title": "Linux 删除大文件内容",
            "date_published": "2021-01-28T01:49:12.000Z",
            "content_html": "<h3 id=\"查看当前目录下一级子文件和子目录占用的磁盘容量\"><a href=\"#查看当前目录下一级子文件和子目录占用的磁盘容量\" class=\"headerlink\" title=\"查看当前目录下一级子文件和子目录占用的磁盘容量\"></a>查看当前目录下一级子文件和子目录占用的磁盘容量</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">du</span> <span class=\"token parameter variable\">-lh</span> --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span>\n<span class=\"token function\">du</span> <span class=\"token parameter variable\">-m</span> –max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span><span class=\"token function\">sort</span> <span class=\"token parameter variable\">-gr</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看根目录下前10大的文件夹\"><a href=\"#查看根目录下前10大的文件夹\" class=\"headerlink\" title=\"查看根目录下前10大的文件夹\"></a>查看根目录下前10大的文件夹</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">du</span> / <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除文件内容\"><a href=\"#删除文件内容\" class=\"headerlink\" title=\"删除文件内容\"></a>删除文件内容</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">删除文件到指定的大小 ， <span class=\"token number\">0</span> 是指定的大小\ntruncate <span class=\"token parameter variable\">-s</span> <span class=\"token number\">0</span> my_file\n删除文件内容\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">></span> my_file\n\n删除my_file前面第1行到10000行 <span class=\"token punctuation\">(</span>这个比较耗时<span class=\"token punctuation\">)</span>\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'1,10000d'</span> my_file\n\n用lsof检查后才发现原因是,有文件被删除,而进程还活着,因而造成还占用空间的现象\n\n<span class=\"token punctuation\">[</span>root@/<span class=\"token punctuation\">]</span><span class=\"token comment\"># lsof |grep delete</span>\n\n根据lsof列出的进程号,kill这些进程后,空间就释放出来了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://gyoliu.github.io/2020/11/20/linux-find-big-file/",
            "url": "https://gyoliu.github.io/2020/11/20/linux-find-big-file/",
            "title": "Linux 大文件查找",
            "date_published": "2020-11-19T16:34:14.000Z",
            "content_html": "<h3 id=\"du-命令用于显示目录或文件的大小\"><a href=\"#du-命令用于显示目录或文件的大小\" class=\"headerlink\" title=\"du 命令用于显示目录或文件的大小\"></a>du 命令用于显示目录或文件的大小</h3><ul>\n<li>-b 显示目录或文件大小时，以byte为单位。</li>\n<li>-h 以K，M，G为单位，提高信息的可读性。 <strong>使用这个会导致排序问题</strong><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">##返回前十的大目录</span>\n<span class=\"token function\">du</span> / <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token comment\">##查找大文件</span>\n<span class=\"token function\">find</span> / <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> +800M  <span class=\"token parameter variable\">-print0</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-0</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n",
            "tags": [
                "Linux"
            ]
        }
    ]
}